What happens when you initialize a repository? Why do you need to do it?

	When I initialize a repository, a new hidden folder is created to include the
	history of the commits. This is necessary. Without that, it's impossible to
	do commits and we have no version control of our project.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is like a waiting room of a hospital. It helps to separate
	the moments to do commits.

How can you use the staging area to make sure you have one commit per logical
change?

	I can use the staging area version to compare with the last commit version
	before I do the commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	I can use branches to make a lot of evolution types in my code, opening oportunities
	to more experimentation without losting progress on official version.

How do the diagrams help you visualize the branch structure?

	Diagrams are a improved visual way to see the historic of different versions
	beyond master.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The branch diagram is a good represent of the version history.
	to more experimentation without losting progress on official version.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Pros: git's automatic merging gives a branch the changes of another branch.
	Cons: you can't see some code lines that can be interesting to you to do some
	changes to make more sense to the new version of the code.

Notes:

git log --graph --oneline $branch1 $branch2 ...

	This command shows the log in a graph structure to see branches and their origins.

When you merge two branches, all branches' commits will appear at the new merged branch, being classified by timestamp.

A merge will result in a conflict when the same part of a code is changed in
both versions.
When you try to merge two branches that results in a conflict, git will modify
the program marking the lines that result in it, dividing it into three section.
HEAD is the first section and marks your code. The master is the second section
and marks the master code. The 'merge common ancestors' is the third section and 
marks the code that both branches modify.
